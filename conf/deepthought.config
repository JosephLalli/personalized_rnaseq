params {
    max_memory = 450.GB
    max_cpus = 100
}

process {
    cache = 'lenient'
    maxRetries = 10
    // withLabel: io_heavy {
        // maxForks=6
    // }

    if (!(params.skip_fastqc || params.skip_qc)) {
        withName:'.*:FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
            cpus = 1
            memory = { 1.GB * task.attempt }
        }
    }

    if (!params.skip_trimming) {
        withName:'.*:FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
            publishDir = [[path:{ "${params.outdir}/trimgalore/fastqc" }, mode:'copy', pattern:'*.{html,zip}'], [path:{ "${params.outdir}/trimgalore" }, mode:'copy', pattern:'*.fq.gz', enabled:true], [path:{ "${params.outdir}/trimgalore" }, mode:'copy', pattern:'*.txt']]
            cpus = 2    
            memory = { 500.MB * task.attempt }
        }
    }

    // generate genomes
    withName: 'RSEM_PREPAREREFERENCE_GENOME' {
        cpus = 24
        memory = 50.GB
    }

    withName: 'STAR_GENOMEGENERATE|STAR_GENOMEGENERATE_IGENOMES' {
        cpus = 12
        memory = 85.GB
    }

    if (!params.skip_alignment) {
        withName:'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*'{
            cpus = 1
        }
        withName:'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS'{
            memory = { 250.MB * task.attempt }
        }
        withName:'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS'{
            memory = { 50.MB * task.attempt }
        }
        withName:'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT'{
            memory = { 50.MB * task.attempt }
        }
    
        if (!params.skip_leafcutter){
            withName: '.*:QUANTIFY_LEAFCUTTER:REGTOOLS_BAMTOJUNC' {
                cpus = 1
                memory = {500.MB * task.attempt}
            }
            
            withName: '.*:QUANTIFY_LEAFCUTTER:G2GTOOLS_CONVERT_JUNC' {
                cpus = 1
                memory = { 1.GB * task.attempt }
                errorStrategy = 'ignore'
            }

            withName: '.*:QUANTIFY_LEAFCUTTER:LEAFCUTTER_CLUSTERINTRONS' {
                cpus = 1
                memory = {200.MB * task.attempt}
            }
        }
        
        if (!params.skip_markduplicates) {
            withName:'.*:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES'{
                cpus = 1
                memory = { ( 35.GB + ( 10.GB * task.attempt ) ) }
            }
        }

        if (!params.skip_bigwig) {
            withName: 'BEDTOOLS_GENOMECOV' {
                errorStrategy = 'ignore'
                cpus = 2
                memory = { 30.GB * task.attempt }
            }
            withName:'.*:BEDGRAPH_TO_BIGWIG_FORWARD:UCSC_BEDCLIP' {
                errorStrategy = 'ignore'
                cpus = 1
                memory = { 1.GB * task.attempt }
            }
            withName:'.*:BEDGRAPH_TO_BIGWIG_FORWARD:UCSC_BEDGRAPHTOBIGWIG' {
                errorStrategy = 'ignore'
                cpus = 1
                memory = { 1.GB * task.attempt }    
            }
            withName:'.*:BEDGRAPH_TO_BIGWIG_REVERSE:UCSC_BEDCLIP' {
                errorStrategy = 'ignore'
                cpus = 1
                memory = { 1.GB * task.attempt }
            }
            withName:'.*:BEDGRAPH_TO_BIGWIG_REVERSE:UCSC_BEDGRAPHTOBIGWIG' {
                errorStrategy = 'ignore'
                cpus = 1
                memory = { 1.GB * task.attempt }
            }
        }

        if (!params.skip_stringtie) {
            withName: 'STRINGTIE_STRINGTIE' {
                cpus = 2
                memory = { ( ( 1.GB * ( 2 ** task.attempt ) ) - 1.GB ) } // 1, 3
            }
        }
    }

    if ((!params.skip_alignment && params.aligner == 'star_salmon') || params.pseudo_aligner == 'salmon') {
        if (!params.skip_alignment && params.aligner == 'star_salmon'){   
            withName:'.*:ALIGN_STAR:STAR_ALIGN|.*:ALIGN_STAR:STAR_ALIGN_IGENOMES' {
                cpus = 12
                memory = { ( 50.GB + ( 20.GB * task.attempt ) ) }
                time = 48.h
            }
        }

        withName:'.*:QUANTIFY.*SALMON:SALMON_QUANT' {
            cpus = 12
            memory = { 40.GB * task.attempt }
            time   = { 48.h  * task.attempt }
        }

        withName:'.*:QUANTIFY.*SALMON:SALMON_TXIMPORT' {
            cpus = 1
            memory = { 5.GB * task.attempt }
        }
        withName:'.*:QUANTIFY.*SALMON:SALMON_TX2GENE' {
            cpus = 1
            memory = { 20.GB * task.attempt }
        }

        withName:'.*:QUANTIFY.*SALMON:SALMON_SE_.*'{
            cpus = 1
            memory = { 750.MB * task.attempt }
        }

        // if (!params.skip_qc & !params.skip_deseq2_qc) {
            withName: 'DESEQ2_QC.*SALMON' {
                cpus = 10
                memory = { 3.GB * task.attempt }
            }
        // }
    }

    if (params.use_personalized_references) {
        withName: '.*PREPARE_PERSONALIZED_TRANSCRIPTOME:SEPARATE_AUTOSOMAL_CHROMS' {
            // cpus = { 6 * task.attempt }
            cpus = 1
            memory = { 1.GB * task.attempt }
        }

        withName: '.*PREPARE_PERSONALIZED_TRANSCRIPTOME:VCF2VCI' {
            ext.prefix = { "${meta.id}-${meta.ploidy}" }
            // cpus = { 10 * task.attempt }
            cpus = 1
            memory = { 1500.MB * task.attempt }
            errorStrategy = 'retry'
        }

        withName: '.*PREPARE_PERSONALIZED_TRANSCRIPTOME:CONVERT' {
            ext.prefix = { "${meta.id}-${meta.ploidy}" }
            cpus = { 1 * task.attempt }
            memory = { 750.MB * task.attempt }
            errorStrategy = 'retry'
        }

        withName: '.*PREPARE_PERSONALIZED_TRANSCRIPTOME:PATCH_REF' {
            ext.prefix = { "${meta.id}-${meta.ploidy}" }
            // cpus = { 2 * task.attempt }
            cpus = 1
            memory = { 9.GB * task.attempt }
            errorStrategy = 'retry'
        }

        withName: '.*PREPARE_PERSONALIZED_TRANSCRIPTOME:TRANSFORM' {
            ext.prefix = { "${meta.id}-${meta.ploidy}" }
            // cpus = { 2 * task.attempt }
            cpus = 1
            memory = { 12.GB * task.attempt }
            errorStrategy = 'retry'
        }

        withName: '.*PREPARE_PERSONALIZED_TRANSCRIPTOME:GTF2DB' {
            ext.prefix = { "${meta.id}-${meta.ploidy}" }
            cpus = { 1 * task.attempt }
            memory = { 100.MB * task.attempt }
            errorStrategy = 'retry'
        }

        withName: '.*PREPARE_PERSONALIZED_TRANSCRIPTOME:EXTRACT' {
            ext.prefix = { "${meta.id}-${meta.ploidy}" }
            cpus = { 1 * task.attempt }
            memory = { 4.GB * task.attempt }
            errorStrategy = 'retry'
        }

        withName: '.*PREPARE_PERSONALIZED_TRANSCRIPTOME:SALMON_INDEX' {
            cpus = { 6 * task.attempt }
            memory = { 35.GB * task.attempt }
            // cpus = { 1 + (12 * (task.attempt-1)) }
            // memory = { 1.GB + (35.GB * (task.attempt-1)) }
            errorStrategy = 'retry'
        }
    }

    withName:'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        cpus = 1
        memory = { 300.MB * task.attempt }
    }
    
    withName:'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        cpus = 4
        memory = { 4500.MB * task.attempt }
    }

    if (!params.skip_alignment && !params.skip_qc) {
        if (!params.skip_preseq) {
            withName:'PRESEQ_LCEXTRAP' {
                cpus = 1
                errorStrategy = 'retry'
                memory = { 16.GB * ( 2 ** ( task.attempt ) ) }
                // memory = { ( 40.GB * ( 2 ** ( task.attempt ) ) ) } // 4, 8, 16, 32, 64
            }
        }
   
        if (!params.skip_qualimap) {
            withName:QUALIMAP_RNASEQ {
                cpus = 1
                if (params.use_personalized_references) {
                    memory = { ( 10.GB * task.attempt ) }
                } else {
                    memory = { ( 5.GB * task.attempt ) }
                }
            }
        }

        if (!params.skip_dupradar) {
            withName: 'DUPRADAR' {
                cpus = 2
                memory = { 1.GB * task.attempt }
            }
        }
    }
    
    if (!params.skip_biotype_qc && params.featurecounts_group_type) {
        withName:SUBREAD_FEATURECOUNTS {
            cpus = 2
            memory = { 750.MB * task.attempt }
        }
        withName:MULTIQC_CUSTOM_BIOTYPE {
            cpus = 1
            memory = { 55.MB * task.attempt }
        }
    }

    if (! params.skip_rseqc){
        if ('bam_stat' in params.rseqc_modules.split(',')) {
            withName:'.*:RSEQC:RSEQC_BAMSTAT' {
                cpus = 1
                memory = { 50.MB * task.attempt }
            }
        }

        if ('infer_experiment' in params.rseqc_modules.split(',')){
            withName:'.*:RSEQC:RSEQC_INFEREXPERIMENT' {
                cpus = 1
                memory = { 100.MB * task.attempt }
            }
        }

        if ('junction_annotation' in params.rseqc_modules.split(',')){
            withName:'.*:RSEQC:RSEQC_JUNCTIONANNOTATION' {
                cpus = 1
                memory = { 300.MB * task.attempt }
            }
        }

        if ('junction_saturation' in params.rseqc_modules.split(',')) {
            withName:'.*:RSEQC:RSEQC_JUNCTIONSATURATION' {
                cpus = 1
                memory = { 1250.MB * task.attempt }
            }
        }

        if ('read_duplication' in params.rseqc_modules.split(',')) {
            withName:'.*:RSEQC:RSEQC_READDUPLICATION' {
                cpus = 1
                memory = { 18.GB * task.attempt } 
            }
        }

        if ('read_distribution' in params.rseqc_modules.split(',') && !params.bam_csi_index) {
            withName:'.*:RSEQC:RSEQC_READDISTRIBUTION' {
                cpus = 1
                memory = { 1500.MB * task.attempt }
            }
        }

        if ('inner_distance' in params.rseqc_modules.split(',') && !params.bam_csi_index) {
            withName:'.*:RSEQC:RSEQC_INNERDISTANCE' {
                cpus = 1
                memory = { 1500.MB * task.attempt }
            }
        }   
    }

    if ( !params.skip_mbv ) {
        withName: '.*:QTLTOOLS_MBV' {
            cpus = 1
            memory = { 8.GB * task.attempt}
            time = '16h'
        }
    }
}

executor {
    queueSize = 200
    killBatchSize = 150
    memory = params.max_memory
    cpus = params.max_cpus
}


docker.runOptions      = "--rm --init -u 1329312471 --memory-swappiness 1"
