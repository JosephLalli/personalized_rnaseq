//
// Uncompress and prepare reference genome files
//
include { PREPARE_REFERENCE_GENOME          } from '../../subworkflows/local/prepare_reference_genome'
include { PERSONALIZE_REFERENCES            } from '../../subworkflows/local/personalize_reference_genome'

workflow PREPARE_GENOME {
    take:
        sample_metadata      // map    : metadata of sample fastqs
        prepare_tool_indices // list   : tools to prepare indices for
        biotype              // string : if additional fasta file is provided biotype value to use when appending entries to GTF file
        is_aws_igenome       // boolean: whether the genome files are from AWS iGenomes

    main:
    ch_versions = Channel.empty()
    ch_vcf = params.vcf ? Channel.fromPath(params.vcf, checkIfExists: true).collect() : Channel.empty()
    ch_vcf_index = params.vcf ? Channel.fromPath(params.vcf_index, checkIfExists: true).collect() : Channel.empty()

    // First, prepare reference genome as usual
    PREPARE_REFERENCE_GENOME(prepare_tool_indices, biotype, is_aws_igenome)
    ch_versions = ch_versions.mix(PREPARE_REFERENCE_GENOME.out.versions)

    ch_fasta            = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.fasta.map{ meta, fasta -> fasta})
    ch_fai              = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.fai.map{ it[1] })
    ch_gtf              = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.gtf.map{ it[1] })


    if ( ! params.use_personalized_references ) {
        ch_gtf_unzipped     = ch_gtf
        ch_gene_bed         = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.gene_bed.map{ it[1] })
        ch_exon_bed         = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.exon_bed.map{ it[1] })
        ch_intron_bed       = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.intron_bed.map{ it[1] })
        ch_intergenic_bed   = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.intergenic_bed.map{ it[1] })
        ch_transcript_fasta = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.transcript_fasta.map{ it[1] })
        ch_chrom_sizes      = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.chrom_sizes.map{ it[1] })
        ch_splicesites      = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.splicesites.map{ it[1] })
        ch_bbsplit_index    = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.bbsplit_index.map{ it[1] })
        ch_star_index       = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.star_index.map{ it[1] })
        ch_rsem_index       = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.rsem_index.map{ it[1] })
        ch_hisat2_index     = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.hisat2_index.map{ it[1] })
        ch_salmon_index     = sample_metadata.combine(PREPARE_REFERENCE_GENOME.out.salmon_index.map{ it[1] })

    } else {
        PERSONALIZE_REFERENCES (sample_metadata,
                                ch_fasta,
                                ch_fai,
                                ch_gtf)

        ch_fasta            = PERSONALIZE_REFERENCES.out.ch_fasta
        ch_gtf              = PERSONALIZE_REFERENCES.out.ch_gtf
        ch_gtf_unzipped     = PERSONALIZE_REFERENCES.out.ch_gtf_unzipped
        ch_fai              = PERSONALIZE_REFERENCES.out.ch_fai
        ch_gene_bed         = PERSONALIZE_REFERENCES.out.ch_gene_bed
        ch_exon_bed         = PERSONALIZE_REFERENCES.out.exon_bed
        ch_intron_bed       = PERSONALIZE_REFERENCES.out.intron_bed
        ch_intergenic_bed   = PERSONALIZE_REFERENCES.out.intergenic_bed
        ch_transcript_fasta = PERSONALIZE_REFERENCES.out.ch_transcript_fasta
        ch_chrom_sizes      = PERSONALIZE_REFERENCES.out.ch_chrom_sizes
        ch_splicesites      = PERSONALIZE_REFERENCES.out.ch_splicesites
        ch_bbsplit_index    = PERSONALIZE_REFERENCES.out.ch_bbsplit_index
        ch_star_index       = PERSONALIZE_REFERENCES.out.ch_star_index
        ch_rsem_index       = PERSONALIZE_REFERENCES.out.ch_rsem_index
        ch_hisat2_index     = PERSONALIZE_REFERENCES.out.ch_hisat2_index
        ch_salmon_index     = PERSONALIZE_REFERENCES.out.ch_salmon_index

        ch_versions = ch_versions.mix(PERSONALIZE_REFERENCES.out.versions)
    }

    emit:
    fasta            = ch_fasta            //    path: genome.fasta
    gtf              = ch_gtf              //    path: genome.gtf
    gtf_unzipped     = ch_gtf_unzipped     //    path: genome.gtf
    ref_gtf          = PREPARE_REFERENCE_GENOME.out.gtf.map{ it[1] }
    fai              = ch_fai              //    path: genome.fai
    gene_bed         = ch_gene_bed         //    path: gene.bed
    exon_bed         = ch_exon_bed
    intron_bed       = ch_intron_bed
    intergenic_bed   = ch_intergenic_bed
    vci              = params.use_personalized_references ? PERSONALIZE_REFERENCES.out.vci : Channel.empty()
    transcript_fasta = ch_transcript_fasta //    path: transcript.fasta
    chrom_sizes      = ch_chrom_sizes      //    path: genome.sizes
    splicesites      = ch_splicesites      //    path: genome.splicesites.txt
    bbsplit_index    = ch_bbsplit_index    //    path: bbsplit/index/
    star_index       = ch_star_index       //    path: star/index/
    rsem_index       = ch_rsem_index       //    path: rsem/index/
    hisat2_index     = ch_hisat2_index     //    path: hisat2/index/
    salmon_index     = ch_salmon_index     //    path: salmon/index/
    versions         = ch_versions.ifEmpty(null) // channel: [ versions.yml ]
}
